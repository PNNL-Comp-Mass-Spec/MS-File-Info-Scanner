import glob
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
import os
from pathlib import Path
import numpy as np
import pandas as pd

# -------------------------------------------------------------------------------
# This file plots data generated by MSFileInfoScanner.exe, saving plots as PNG files
#
# Written by Joon Yong Lee and Matthew Monroe for the Department of Energy (PNNL, Richland, WA)
# Program started in 2017
#
# E-mail: matthew.monroe@pnnl.gov or matt@alchemistmatt.com
# Website: http:#omics.pnl.gov/ or http:#www.sysbio.org/resources/staff/ or http:#panomics.pnnl.gov/
# -------------------------------------------------------------------------------

# Update the default font
plt.rcParams["font.family"] = "arial"

def process_file(dataFilePath):
    dataFile = Path(dataFilePath)
    if not dataFile.is_file():
        print('Error, file not found: ' + dataFilePath)
        return

    print('Input: ', dataFile)
    data, meta, plot_spec = read_file(dataFile)
    
    outputFilePath = str(dataFile.with_suffix('.png'))
    
    if len(data.columns) == 2:
        print('Output:', outputFilePath)
        print()
        print('Plot "' + data.columns[0] + '" vs. "' + data.columns[1] + '"')            
        print('  ' + str(len(data.index)) + ' data points')
        print()
        plot_lc_intensity(outputFilePath, data.columns, data[data.columns[0]], data[data.columns[1]], meta['Title'], meta['BottomRight'])
        return
    
    if len(data.columns) == 3:
        print('Output:', outputFilePath)
        print()
        print('Plot "' + data.columns[0] + '" vs. "' + data.columns[1] + '" vs. "' + data.columns[2] + '"')
        print('  ' + str(len(data.index)) + ' data points')
        print()
        plot_lc_mz(outputFilePath, data.columns, data[data.columns[0]], data[data.columns[1]], data[data.columns[2]], meta['Title'], meta['BottomRight'], meta['BottomLeft'])
        return
    
    if len(data.columns) == 4:
        print('Output:', outputFilePath)
        print()
        print('Plot "' + data.columns[0] + '" vs. "' + data.columns[1] + '" vs. "' + data.columns[2] + '" coloring by ' + data.columns[3])
        print('  ' + str(len(data.index)) + ' data points')
        print()
        plot_lc_mz_by_charge(outputFilePath, data.columns, data[data.columns[0]], data[data.columns[1]], data[data.columns[2]], data[data.columns[3]], meta['Title'], meta['BottomRight'], meta['BottomLeft'])
        return
        
    print('Unsupported number of columns: ' + str(len(data.columns)))
    print(data.columns)
    
def parse_metadata(meta):
    return {m.split('=')[0]:m.split('=')[1] for m in meta.split(';')}

def read_file(fpath):
    data = pd.read_csv(fpath, sep='\t', skiprows=2, header=0)
    with open(fpath, 'r') as f:
        first = f.readline().split('[')[1].split(']')[0]
        meta = parse_metadata(first)
        second = f.readline().split('\t')
        plot_spec = [parse_metadata(s) for s in second]
        return data, meta, plot_spec

def plot_lc_intensity(outputFilePath, columnNames, lc_scan_num, intensities, title, r_label):
    fig = plt.figure(figsize=(8.5333,5), dpi=120)
    ax = fig.add_subplot(111, facecolor='whitesmoke')
    
    baseFontSize = 12
    
    ax.plot(lc_scan_num, intensities, linewidth=0.5, color='k')
    plt.ylim(ymin = 0)
    plt.title(title, fontsize=baseFontSize+1)
    
    # X axis is typically scan number
    plt.xlabel(columnNames[0], fontsize=baseFontSize)
    # Y axis is typically intensity
    plt.ylabel(columnNames[1], fontsize=baseFontSize)

    plt.xticks(fontsize=baseFontSize-2)
    plt.yticks(fontsize=baseFontSize-2)
    ax.yaxis.set_major_formatter(mtick.FormatStrFormatter('%.2e'))
    ax.yaxis.set_minor_locator(mtick.AutoMinorLocator())
    
    ax.xaxis.set_major_locator(mtick.MultipleLocator(5000))
    ax.xaxis.set_major_formatter(mtick.FuncFormatter(lambda x, p: format(int(x), ',')))
    ax.xaxis.set_minor_locator(mtick.AutoMinorLocator())

    plt.gcf().text(0.85, 0.02, r_label, fontsize=baseFontSize-1)
    plt.tight_layout()
    plt.savefig(outputFilePath)
    print('Plot created')
    
    # Uncomment to view the plot with an interactive GUI
    #plt.show()

def generate_heat_map(columnNames, xData, yData, zData, title, r_label, l_label):
    fig = plt.figure(figsize=(8.5333,5.8333), dpi=120)
    ax = fig.add_subplot(111, facecolor='whitesmoke')
    
    baseFontSize = 12
    
    cm = plt.cm.get_cmap('Blues')
    sc = ax.scatter(xData, yData, c=zData, vmin=np.min(zData), vmax=np.max(zData)/100, s=1, cmap=cm)
    plt.colorbar(sc)
    
    plt.ylim(ymin = 0)
    plt.title(title, fontsize=baseFontSize+1)

    # X axis is typically scan number
    plt.xlabel(columnNames[0], fontsize=baseFontSize)
    # Y axis is typically m/z, but could be monoisotopic mass
    plt.ylabel(columnNames[1], fontsize=baseFontSize)

    plt.xticks(fontsize=baseFontSize-2)
    plt.yticks(fontsize=baseFontSize-2)
    ax.yaxis.set_major_formatter(mtick.FormatStrFormatter('%.2e'))
    ax.yaxis.set_minor_locator(mtick.AutoMinorLocator())
    
    ax.xaxis.set_major_locator(mtick.MultipleLocator(5000))
    ax.xaxis.set_major_formatter(mtick.FuncFormatter(lambda x, p: format(int(x), ',')))
    ax.xaxis.set_minor_locator(mtick.AutoMinorLocator())

    plt.gcf().text(0.85, 0.02, r_label, fontsize=baseFontSize-1)
    plt.gcf().text(0.01, 0.02, l_label, fontsize=baseFontSize-1)
    plt.tight_layout()
    
    return plt

def plot_lc_mz(outputFilePath, columnNames, lc_scan_num, mz, intensities, title, r_label, l_label):
    plt = generate_heat_map(columnNames, lc_scan_num, mz, intensities, title, r_label, l_label)    
    plt.savefig(outputFilePath)
    print('Plot created')

def plot_lc_mz_by_charge(outputFilePath, columnNames, lc_scan_num, mz, intensities, charge, title, r_label, l_label):
    plt = generate_heat_map(columnNames, lc_scan_num, mz, charge, title, r_label, l_label)
    
    # ToDo: add charge state legend
    
    plt.savefig(outputFilePath)
    print('Plot created')
    
import sys

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Error: please enter the file name to process (wildcards are supported)')
        exit()
    
    fileNameMatchSpec = sys.argv[1]

    filesProcessed = 0
    for dataFile in glob.glob(fileNameMatchSpec):
        process_file(dataFile)
        filesProcessed += 1
        
    if filesProcessed == 0:
        print('No match to:\n' + fileNameMatchSpec)


# Can list fonts with the following
#import matplotlib.font_manager
#from matplotlib.font_manager import findfont, FontProperties
#fonts = matplotlib.font_manager.findSystemFonts(fontpaths=None, fontext='ttf')
#for font in sorted(fonts):
    #print(font)

# View details on a specific font with
#font = findfont(FontProperties(family=['arial']))
#print (font)
#exit()
